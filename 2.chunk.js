webpackJsonp([2],{

/***/ "../../../../../src/app/pages/documentation/documentation.component.html":
/***/ (function(module, exports) {

module.exports = "<header-component tagline=\"Documentation\"></header-component>\n\n<section class=\"main-content\">\n  <h2><a id=\"documentation\" class=\"anchor\" href=\"#documentation\" aria-hidden=\"true\"><span aria-hidden=\"true\"\n                                                                                          class=\"octicon octicon-link\"></span></a>Documentation\n  </h2>\n\n  <h3><a id=\"inputs\" class=\"anchor\" href=\"#configuration\" aria-hidden=\"true\"><span aria-hidden=\"true\"\n                                                                                   class=\"octicon octicon-link\"></span></a>Component\n    Inputs</h3>\n\n  <table>\n    <tr>\n      <th>Input</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>[settings]</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>Table component configuration object, properties described below</td>\n    </tr>\n    <tr>\n      <td>[source]</td>\n      <td><span class=\"highlight\">Array</span>|<span class=\"highlight\">DataSource</span></td>\n      <td>Table data, either an array or DataSource object (LocalDataSource currently supported)</td>\n    </tr>\n  </table>\n\n  <h3><a id=\"configuration\" class=\"anchor\" href=\"#configuration\" aria-hidden=\"true\"><span aria-hidden=\"true\"\n                                                                                          class=\"octicon octicon-link\"></span></a>Table\n    Configuration</h3>\n\n  <table>\n    <tr>\n      <th>Property</th>\n      <th>Type</th>\n      <th>Default</th>\n      <th>Description</th>\n    </tr>\n    <tr class=\"section\">\n      <td>Required Table Settings</td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>columns</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Table column settings, by default an empty object.<br>\n        Example format:<br>\n        <code>\n          columns: {{ \"{ columnKey: { title: 'Some Title' } '}\" }}\n        </code>\n        <br>\n        Please note, <b>columnKey</b> must be the same as a key in data array objects.\n      </td>\n    </tr>\n    <tr class=\"section\">\n      <td>Column Settings</td>\n      <td></td>\n      <td></td>\n      <td>\n        List of a column's settings\n      </td>\n    </tr>\n    <tr>\n      <td>title</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Column title\n      </td>\n    </tr>\n    <tr>\n      <td>class</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Column class\n      </td>\n    </tr>\n    <tr>\n      <td>width</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Column width, example: <span class=\"highlight\">'20px'</span>, <span class=\"highlight\">'20%'</span>\n      </td>\n    </tr>\n    <tr>\n      <td>editable</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>true</td>\n      <td>\n        Whether this column is editable or not\n      </td>\n    </tr>\n    <tr>\n      <td>isEditableFunction</td>\n      <td><span class=\"highlight\">Function</span></td>\n      <td>null</td>\n      <td>\n        Function to determine if this column is editable or not. Cell object is passed to function\n      </td>\n    </tr>\n    <tr>\n      <td>inputFormatFunction</td>\n      <td><span class=\"highlight\">Function</span></td>\n      <td>null</td>\n      <td>\n        Function that will be used to format the input string on keyup event and on AfterViewInit. Input value is passed to the function\n      </td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <td><span class=\"highlight\">'text'</span>|<span class=\"highlight\">'html'</span>|<span\n        class=\"highlight\">'custom'</span></td>\n      <td>'text'</td>\n      <td>\n        If type is <span class=\"highlight\">text</span> then cell value will be inserted as text.<br>\n        If type is <span class=\"highlight\">html</span> then cell value will be inserted as html.<br>\n        If type is <span class=\"highlight\">custom</span> the <code>renderComponent</code> property must be defined.\n      </td>\n    </tr>\n    <tr>\n      <td>renderComponent</td>\n      <td><span class=\"highlight\">any</span></td>\n      <td>null</td>\n      <td>\n        Custom component that will be responsible for rendering the cell content while in view mode.<br>\n        Type must be <span class=\"highlight\">custom</span> in order for this to work.<br>\n        You can see an <a class=\"source\"\n                          href=\"https://github.com/akveo/ng2-smart-table/blob/master/src/app/pages/examples/custom-edit-view/advanced-example-custom-editor.component.ts\">example\n        here</a>\n      </td>\n    </tr>\n    <tr>\n      <td>onComponentInitFunction</td>\n      <td><span class=\"highlight\">Function</span></td>\n      <td>null</td>\n      <td>\n        Function which will be invoked after <span class=\"highlight\">renderComponent</span> instantiated and before\n        ngOnInit hook. This function gets <span class=\"highlight\">renderComponent</span> instance in first param.\n      </td>\n    </tr>\n    <tr>\n      <td>editor</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Editor attributes settings\n      </td>\n    </tr>\n    <tr>\n      <td><span class=\"nested-obj\">editor</span>.type</td>\n      <td><span class=\"highlight\">'text' | 'textarea' | 'completer' | 'list' | 'checkbox'</span></td>\n      <td>'text'</td>\n      <td>\n        Editor used when new row is added or edited\n      </td>\n    </tr>\n    <tr>\n      <td><span class=\"nested-obj\">editor</span>.config</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Editor configuration settings. Mandatory only for editor types <span class=\"highlight\">completer</span>, <span\n        class=\"highlight\">list</span>\n      </td>\n    </tr>\n    <tr>\n      <td><span class=\"nested-obj\">editor.config</span>.true</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Only on <span class=\"highlight\">checkbox</span> type.<br>\n        Defines the value to assign when the checkbox is checked. This parameter is optional, if omitted,\n        <code>true</code> will be used.\n      </td>\n    </tr>\n    <tr>\n      <td><span class=\"nested-obj\">editor.config</span>.false</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Only on <span class=\"highlight\">checkbox</span> type.<br>\n        Defines the value to assign when the checkbox is not checked. This parameter is optional, if omitted, <code>false</code>\n        will be used.\n      </td>\n    </tr>\n    <tr>\n      <td><span class=\"nested-obj\">editor.config</span>.list</td>\n      <td><span class=\"highlight\">Array</span></td>\n      <td>[ ]</td>\n      <td>\n        Only on <span class=\"highlight\">list</span> type. Example format:<br>\n        <code>{{ \"{ value: 'Element Value', title: 'Element Title' }\" }}</code><br>\n        Html is supported if column type is <span class=\"highlight\">'html'</span>\n      </td>\n    </tr>\n    <tr>\n      <td><span class=\"nested-obj\">editor.config</span>.completer</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Only on <span class=\"highlight\">completer</span> type. Example format:<br>\n        Completer configuration settings\n      </td>\n    </tr>\n    <tr>\n      <td><span class=\"nested-obj\">editor.config.completer</span>.data</td>\n      <td><span class=\"highlight\">Array</span></td>\n      <td>[ ]</td>\n      <td>\n        Autocomplete list data source.<br>\n        Example format:<br>\n        <code>{{ \"{ id: 10, name: 'Nick', email: 'rey@karina.biz' }\" }}</code>\n      </td>\n    </tr>\n    <tr>\n      <td><span class=\"nested-obj\">editor.config.completer</span>.searchFields</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Comma separated list of fields to search on. Fields may contain dots for nested attributes; if empty or null all\n        data will be returned\n      </td>\n    </tr>\n    <tr>\n      <td><span class=\"nested-obj\">editor.config.completer</span>.titleField</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Name of the field to use as title for the list item\n      </td>\n    </tr>\n    <tr>\n      <td><span class=\"nested-obj\">editor.config.completer</span>.descriptionField</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Name of the field to use as description for the list item\n      </td>\n    </tr>\n    <tr>\n      <td>filter</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Column filter attributes settings. This object accepts the same properties as the <code>editor</code>\n        object.<br>\n        The available types are: <code>checkbox</code>, <code>select</code>, <code>completer</code>.<br>\n        The <code>checkbox</code> type accepts one more optional property compared to the <code>editor</code> version:\n        <span class=\"highlight\">resetText: string</span>.\n        It defines the text of the button to reset the checkbox selection.<br>\n        <a class=\"source\"\n           href=\"https://github.com/akveo/ng2-smart-table/blob/master/src/app/pages/examples/filter/advanced-example-filters.component.ts\">Click\n          here to see an example</a> on how to configure it.\n      </td>\n    </tr>\n    <tr>\n      <td>valuePrepareFunction</td>\n      <td><span class=\"highlight\">Function</span></td>\n      <td>\n        n/a\n      </td>\n      <td>\n        Function run against a value before it gets inserted into a cell.\n        You can use it to modify how a value is displayed in the cell.\n        <br>\n        This function will be invoked with 2 parameters: cell, row\n      </td>\n    </tr>\n    <tr>\n      <td>sort</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>true</td>\n      <td>\n        Column sort settings, enable/disable.\n      </td>\n    </tr>\n    <tr>\n      <td>sortDirection</td>\n      <td><span class=\"highlight\">'asc'|'desc'</span></td>\n      <td>n/a</td>\n      <td>\n        Sort table by this column with this direction by default.<br>\n        Applied only when <span class=\"highlight\">sort</span> = true.\n        Note: multiple sort option is not supported yet, so sortDirection can be applied to only one column per table.\n      </td>\n    </tr>\n    <tr>\n      <td>compareFunction</td>\n      <td><span class=\"highlight\">Function</span></td>\n      <td>\n        n/a\n      </td>\n      <td>\n        Function run against the values to sort the table\n      </td>\n    </tr>\n    <tr>\n      <td>filter</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>true</td>\n      <td>\n        Column filter settings, enable/disable\n      </td>\n    </tr>\n    <tr>\n      <td>filterFunction</td>\n      <td><span class=\"highlight\">Function</span></td>\n      <td>n/a</td>\n      <td>\n        Function run against the column value when filtering is happening\n      </td>\n    </tr>\n    <tr class=\"section\">\n      <td>Other Table Settings</td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>mode</td>\n      <td><span class=\"highlight\">'external'</span>|<span class=\"highlight\">'inline'</span></td>\n      <td>'inline'</td>\n      <td>\n        Determines how to react on action links (Add, Edit, Delete).<br>\n        <span class=\"highlight\">'external'</span> - just trigger the events (LINK HERE).<br>\n        <span class=\"highlight\">'inline'</span> - process internally, show forms/inputs/etc<br>\n      </td>\n    </tr>\n    <tr>\n      <td>hideHeader</td>\n      <td><span class=\"highlight\">'boolean'</span></td>\n      <td>false</td>\n      <td>\n        Set to true to not display the table header (which includes table column titles)\n      </td>\n    </tr>\n    <tr>\n      <td>hideSubHeader</td>\n      <td><span class=\"highlight\">'boolean'</span></td>\n      <td>false</td>\n      <td>\n        Set to true to not display the table sub-header (which includes filters and global table actions (currently -\n        Add action))\n      </td>\n    </tr>\n    <tr>\n      <td>noDataMessage</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>'No data found'</td>\n      <td>\n        Message shown when there is no data in the table\n      </td>\n    </tr>\n    <tr>\n      <td>attr</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Table attributes settings\n      </td>\n    </tr>\n    <tr>\n      <td>attr.id</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Table element id\n      </td>\n    </tr>\n    <tr>\n      <td>attr.class</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Table element class\n      </td>\n    </tr>\n    <tr>\n      <td>actions</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Settings for the table actions\n      </td>\n    </tr>\n    <tr>\n      <td>actions.columnTitle</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>'Actions'</td>\n      <td>\n        Actions column title\n      </td>\n    </tr>\n    <tr>\n      <td>actions.add</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>true</td>\n      <td>\n        Show/not show Add button\n      </td>\n    </tr>\n    <tr>\n      <td>actions.edit</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>true</td>\n      <td>\n        Show/not show Edit button\n      </td>\n    </tr>\n    <tr>\n      <td>actions.delete</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>true</td>\n      <td>\n        Show/not show Delete button\n      </td>\n    </tr>\n    <tr>\n      <td>actions.position</td>\n      <td><span class=\"highlight\">'left'</span>|<span class=\"highlight\">'right'</span></td>\n      <td>'left'</td>\n      <td>\n        Choose actions column position\n      </td>\n    </tr>\n    <tr>\n      <td>actions.custom</td>\n      <td><span class=\"highlight\">Array of Objects</span></td>\n      <td>null</td>\n      <td>\n        Add custom actions. Each object has these properties:\n        <ul>\n          <li>name: <span class=\"highlight\">string</span></li>\n          <li>title: <span class=\"highlight\">string</span></li>\n          <li>[showFunction]: <span class=\"highlight\">Function</span> with parameter <span class=\"highlight\">row</span>,\n            the row the action is being rendered in\n          </li>\n          <li>[type]: <span class=\"highlight\">string</span></li>\n          <li>\n            [optionItems]: <span class=\"highlight\">Array of Objects</span> with properties:\n            <ul>\n              <li>value:<span class=\"highlight\">string</span></li>\n              <li>description: <span class=\"highlight\">string</span></li>\n            </ul>\n          </li>\n          <li>\n            [defaultSelection]: <span class=\"highlight\">Object</span>\n            <ul>\n              <li>value:<span class=\"highlight\">string</span></li>\n              <li>description: <span class=\"highlight\">string</span></li>\n            </ul>\n          </li>\n        </ul>\n        Currently only two types of custom actions, 'default || null' and 'select'. Use optionItems with select type.\n        (custom) event will be emitted on click of default action and selection for select action\n      </td>\n    </tr>\n    <tr>\n      <td>actions.showUpdateCancel</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>true</td>\n      <td>\n        Show Update and Cancel buttons in actions column while row is in editing.\n      </td>\n    </tr>\n    <tr>\n      <td>actions.showCustomDuringEdit</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>false</td>\n      <td>\n        Show custom action components while row is in editing. To keep select value chosen in custom select action\n        during editing, use the (custom) event to set the matching field in the row data. Example:\n        <code>\n          {{ \"onCustom(event: any) { event.data[event.action.name] = event.selectedItem; }\" }}\n        </code>\n      </td>\n    </tr>\n    <tr>\n      <td>actions.showCustomDuringView</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>true</td>\n      <td>\n        Show custom action components while row is not in editing. Set to false if you don't want your custom action to\n        show in view (only want it in editing)\n      </td>\n    </tr>\n    <tr>\n      <td>actions.showCustomInForm</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>false</td>\n      <td>\n        Show custom action components in new row form\n      </td>\n    </tr>\n    <tr>\n      <td>filter</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Settings for the table filter\n      </td>\n    </tr>\n    <tr>\n      <td>filter.inputClass</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Filter input class\n      </td>\n    </tr>\n    <tr>\n      <td>edit</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Edit action settings\n      </td>\n    </tr>\n    <tr>\n      <td>edit.inputClass</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        Editing form input class\n      </td>\n    </tr>\n    <tr>\n      <td>edit.editButtonContent</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>'Edit'</td>\n      <td>\n        Edit row button content/title\n      </td>\n    </tr>\n    <tr>\n      <td>edit.saveButtonContent</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>'Update'</td>\n      <td>\n        Update button content/title\n      </td>\n    </tr>\n    <tr>\n      <td>edit.cancelButtonContent</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>'Cancel'</td>\n      <td>\n        Cancel button content/title\n      </td>\n    </tr>\n    <tr>\n      <td>edit.confirmSave</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>false</td>\n      <td>\n        Enable/disable <span class=\"highlight\">(confirmEdit)</span> event. If enabled data will be edited only if\n        confirm.resolve() called.\n      </td>\n    </tr>\n    <tr>\n      <td>add</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Add action settings\n      </td>\n    </tr>\n    <tr>\n      <td>add.inputClass</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>''</td>\n      <td>\n        New row input class\n      </td>\n    </tr>\n    <tr>\n      <td>add.addButtonContent</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>'Add New'</td>\n      <td>\n        Add New button content/title\n      </td>\n    </tr>\n    <tr>\n      <td>add.createButtonContent</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>'Create'</td>\n      <td>\n        Create button content/title\n      </td>\n    </tr>\n    <tr>\n      <td>add.cancelButtonContent</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>'Cancel'</td>\n      <td>\n        Cancel button content/title\n      </td>\n    </tr>\n    <tr>\n      <td>add.confirmCreate</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>false</td>\n      <td>\n        Enable/disable <span class=\"highlight\">(confirmCreate)</span> event. If enabled data will be added only if\n        confirm.resolve() called.\n      </td>\n    </tr>\n    <tr>\n      <td>delete</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Delete action settings\n      </td>\n    </tr>\n    <tr>\n      <td>delete.deleteButtonContent</td>\n      <td><span class=\"highlight\">string</span></td>\n      <td>'Delete'</td>\n      <td>\n        Delete row input class\n      </td>\n    </tr>\n    <tr>\n      <td>delete.confirmDelete</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>false</td>\n      <td>\n        Enable/disable <span class=\"highlight\">(confirmDelete)</span> event. If enabled data will be deleted only if\n        confirm.resolve() called.\n      </td>\n    </tr>\n    <tr>\n      <td>pager</td>\n      <td><span class=\"highlight\">Object</span></td>\n      <td>n/a</td>\n      <td>\n        Pager settings\n      </td>\n    </tr>\n    <tr>\n      <td>pager.display</td>\n      <td><span class=\"highlight\">boolean</span></td>\n      <td>true</td>\n      <td>\n        Whether to display the pager or not\n      </td>\n    </tr>\n    <tr>\n      <td>pager.perPage</td>\n      <td><span class=\"highlight\">number</span></td>\n      <td>10</td>\n      <td>\n        Rows per page\n      </td>\n    </tr>\n    <tr>\n      <td>rowClassFunction</td>\n      <td><span class=\"highlight\">Function</span></td>\n      <td>row</td>\n      <td>\n        Handle css class for each row in the table\n      </td>\n    </tr>\n    <tr>\n      <td>cellClassFunction</td>\n      <td><span class=\"highlight\">Function</span></td>\n      <td>cell</td>\n      <td>\n        Handle css class for each cell in the table\n      </td>\n    </tr>\n  </table>\n\n  <h3><a id=\"events\" class=\"anchor\" href=\"#events\" aria-hidden=\"true\"><span aria-hidden=\"true\"\n                                                                            class=\"octicon octicon-link\"></span></a>Component\n    Outputs/Events</h3>\n\n  <table>\n    <tr>\n      <th>Event</th>\n      <th>Arguments</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>(rowSelect)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, consist of:\n        <ul>\n          <li>data: <span class=\"highlight\">Object</span> - selected row data object</li>\n          <li>source: <span class=\"highlight\">DataSource</span> - table data source</li>\n        </ul>\n      </td>\n      <td>\n        Triggered once a row is selected (either clicked or selected automatically (after page is changed, after some\n        row is deleted, etc)).\n      </td>\n    </tr>\n    <tr>\n      <td>(userRowSelect)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, consist of:\n        <ul>\n          <li>data: <span class=\"highlight\">Object</span> - selected row data object</li>\n          <li>source: <span class=\"highlight\">DataSource</span> - table data source</li>\n        </ul>\n      </td>\n      <td>\n        Triggered <strong>only</strong> on a user click event.\n      </td>\n    </tr>\n    <tr>\n      <td>(mouseover)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, consist of:\n        <ul>\n          <li>data: <span class=\"highlight\">Object</span> - highlighted row data object</li>\n          <li>source: <span class=\"highlight\">DataSource</span> - table data source</li>\n        </ul>\n      </td>\n      <td>\n        Triggered <strong>only</strong> on a user mouseover event.\n      </td>\n    </tr>\n    <tr>\n      <td>(create)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, consist of:\n        <ul>\n          <li>source: <span class=\"highlight\">DataSource</span> - table data source</li>\n        </ul>\n      </td>\n      <td>\n        Triggered once a Create button clicked. Triggered only if table <strong>mode = external</strong>.\n      </td>\n    </tr>\n    <tr>\n      <td>(createConfirm)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, consist of:\n        <ul>\n          <li>newData: <span class=\"highlight\">Object</span> - data entered in a new row</li>\n          <li>source: <span class=\"highlight\">DataSource</span> - table data source</li>\n          <li>confirm: <span class=\"highlight\">Deferred</span> - Deferred object with resolve(newData: Object) and\n            reject() methods.\n          </li>\n        </ul>\n      </td>\n      <td>\n        Triggered once a Create button clicked. Triggered only if table <strong>confirmCreate = true and mode =\n        inline</strong>.\n        Allows you to confirm changes before they are applied to the table data source.\n      </td>\n    </tr>\n    <tr>\n      <td>(edit)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, consist of:\n        <ul>\n          <li>data: <span class=\"highlight\">Object</span> - row data object</li>\n          <li>source: <span class=\"highlight\">DataSource</span> - table data source</li>\n        </ul>\n      </td>\n      <td>\n        Triggered once an Edit button clicked on a row. Triggered only if table <strong>mode = external</strong>.\n      </td>\n    </tr>\n    <tr>\n      <td>(editConfirm)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, consist of:\n        <ul>\n          <li>data: <span class=\"highlight\">Object</span> - original row data</li>\n          <li>newData: <span class=\"highlight\">Object</span> - edited data</li>\n          <li>source: <span class=\"highlight\">DataSource</span> - table data source</li>\n          <li>confirm: <span class=\"highlight\">Deferred</span> - Deferred object with resolve(newData: Object) and\n            reject() methods.\n          </li>\n        </ul>\n      </td>\n      <td>\n        Triggered once a Save button clicked. Triggered only if table <strong>confirmSave = true and mode =\n        inline</strong>.\n        Allows you to confirm changes before they are applied to the table data source.\n      </td>\n    </tr>\n    <tr>\n      <td>(delete)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, consist of:\n        <ul>\n          <li>data: <span class=\"highlight\">Object</span> - row data object</li>\n          <li>source: <span class=\"highlight\">DataSource</span> - table data source</li>\n        </ul>\n      </td>\n      <td>\n        Triggered once a Delete button clicked on a row. Triggered only if table <strong>mode = external</strong>.\n      </td>\n    </tr>\n    <tr>\n      <td>(deleteConfirm)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, consist of:\n        <ul>\n          <li>data: <span class=\"highlight\">Object</span> - data object to delete</li>\n          <li>source: <span class=\"highlight\">DataSource</span> - table data source</li>\n          <li>confirm: <span class=\"highlight\">Deferred</span> - Deferred object with resolve() and reject() methods.\n          </li>\n        </ul>\n      </td>\n      <td>\n        Triggered once a Delete button clicked. Triggered only if table <strong>confirmDelete = true and mode =\n        inline</strong>.\n        Allows you to confirm changes before they are applied to the table data source.\n      </td>\n    </tr>\n    <tr>\n      <td>(completed)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, consist of:\n        <ul>\n          <li>data: <span class=\"highlight\">Object</span> - object with Completer data (originalObject has data from\n            completer data source)\n          </li>\n          <li>row: <span class=\"highlight\">Row</span> - Row data</li>\n        </ul>\n      </td>\n      <td>\n        Triggered once an auto complete choice is clicked.\n      </td>\n    </tr>\n    <tr>\n      <td>(custom)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, consist of:\n        <ul>\n          <li>action: <span class=\"highlight\">Object</span> - object with action properties</li>\n          <li>data: <span class=\"highlight\">Object</span> - object with row data</li>\n          <li>source: <span class=\"highlight\">Row</span> - source data</li>\n          <li>selectedItem: <span class=\"highlight\">Any</span> - selected option value</li>\n        </ul>\n      </td>\n      <td>\n        Triggered when a custom action is clicked or selected\n      </td>\n    </tr>\n    <tr>\n      <td>(changed)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, <code>{{ \"<\\input>\" }}</code> element that the change event was\n        triggered by plus the cell that emitted it\n      </td>\n      <td>\n        Triggered when an input editor cell's value is changed (value changes and input loses focus)\n      </td>\n    </tr>\n    <tr>\n      <td>(save)</td>\n      <td>\n        event: <span class=\"highlight\">Object</span>, Row that was saved\n      </td>\n      <td>\n        Triggered when the update button is clicked on a row\n      </td>\n    </tr>\n  </table>\n\n  <h3><a id=\"source-method\" class=\"anchor\" href=\"#source-method\" aria-hidden=\"true\"><span aria-hidden=\"true\"\n                                                                                          class=\"octicon octicon-link\"></span></a>Data\n    Source Methods</h3>\n\n  <table>\n    <tr>\n      <th>Method</th>\n      <th>Arguments</th>\n      <th>Description</th>\n    </tr>\n    <tr>\n      <td>load</td>\n      <td>\n        <ul>\n          <li>data: <span class=\"highlight\">Array</span> - data to load into the table</li>\n        </ul>\n      <td>\n        Reload table with new data. For example if some data has received from the server.\n      </td>\n    </tr>\n    <tr>\n      <td>prepend</td>\n      <td>\n        <ul>\n          <li>element: <span class=\"highlight\">Object</span> - object to add</li>\n        </ul>\n      <td>\n        Add a new element to the beginning of the table.\n      </td>\n    </tr>\n    <tr>\n      <td>append</td>\n      <td>\n        <ul>\n          <li>element: <span class=\"highlight\">Object</span> - object to add</li>\n        </ul>\n      <td>\n        Add a new element to the end of the table. This also will switch current page to the last one.\n      </td>\n    </tr>\n    <tr>\n      <td>add</td>\n      <td>\n        <ul>\n          <li>element: <span class=\"highlight\">Object</span> - object to add</li>\n        </ul>\n      <td>\n        Add a new element to the table.\n      </td>\n    </tr>\n    <tr>\n      <td>remove</td>\n      <td>\n        <ul>\n          <li>element: <span class=\"highlight\">Object</span> - object to remove</li>\n        </ul>\n      <td>\n        Remove the element from the table.\n      </td>\n    </tr>\n    <tr>\n      <td>update</td>\n      <td>\n        <ul>\n          <li>element: <span class=\"highlight\">Object</span> - object to update</li>\n          <li>values: <span class=\"highlight\">Object</span> - object with new values</li>\n        </ul>\n      <td>\n        Update the element in the table.\n      </td>\n    </tr>\n    <tr>\n      <td>find</td>\n      <td>\n        <ul>\n          <li>element: <span class=\"highlight\">Object</span> - object to find</li>\n        </ul>\n      <td>\n        Find the element in the table.\n      </td>\n    </tr>\n    <tr>\n      <td>getElements</td>\n      <td>\n        n/a\n      <td>\n        Get elements for current sort, filter and page.\n      </td>\n    </tr>\n    <tr>\n      <td>getFilteredAndSorted</td>\n      <td>\n        n/a\n      <td>\n        Get sorted, filtered and not paginated elements.\n      </td>\n    </tr>\n    <tr>\n      <td>getAll</td>\n      <td>\n        n/a\n      <td>\n        Get all data source elements.\n      </td>\n    </tr>\n    <tr>\n      <td>setSort</td>\n      <td>\n        <ul>\n          <li>\n            conf: <span class=\"highlight\">Array</span> - array of sort setting objects, object format is:\n            <ul>\n              <li>field - <span class=\"highlight\">string</span> - columnKey</li>\n              <li>direction - <span class=\"string\">string|null</span> - 'asc'|'desc'|null - sort direction</li>\n              <li>compare - <span class=\"string\">Function|null</span> - custom compare function</li>\n            </ul>\n          </li>\n          <li>\n            doEmit: <span class=\"highlight\">boolean</span> - emit event (to refresh the table) or not, default = true\n          </li>\n        </ul>\n      <td>\n        Set table sorts, example: <br>\n        <code>this.source.setSort([{{ \"{ field: 'id', direction: 'asc' }\" }}]);</code>\n      </td>\n    </tr>\n    <tr>\n      <td>setFilter</td>\n      <td>\n        <ul>\n          <li>\n            conf: <span class=\"highlight\">Array</span> - array of filter setting objects, object format is:\n            <ul>\n              <li>field - <span class=\"highlight\">string</span> - columnKey</li>\n              <li>search - <span class=\"string\">string</span> - search query</li>\n              <li>filter - <span class=\"string\">Function|null</span> - custom filter function</li>\n            </ul>\n          </li>\n          <li>\n            andOperator: <span class=\"highlight\">boolean</span> - how to process multiple filters (as AND or as OR),\n            default = true (AND)\n          </li>\n          <li>\n            doEmit: <span class=\"highlight\">boolean</span> - emit event (to refresh the table) or not, default = true\n          </li>\n        </ul>\n      <td>\n        Set table filters, example: <br>\n        <code>this.source.setFilter([{{ \"{ field: 'id', search: 'foobar' }\" }}, {{ \"{ field: 'name', search: 'foobar' }\"\n          }}]);</code>\n      </td>\n    </tr>\n    <tr>\n      <td>addFilter</td>\n      <td>\n        <ul>\n          <li>\n            conf: <span class=\"highlight\">Object</span> - one filter object, format is:\n            <ul>\n              <li>field - <span class=\"highlight\">string</span> - columnKey</li>\n              <li>search - <span class=\"string\">string</span> - search query</li>\n              <li>filter - <span class=\"string\">Function|null</span> - custom filter function</li>\n            </ul>\n          </li>\n          <li>\n            andOperator: <span class=\"highlight\">boolean</span> - how to process multiple filters (as AND or as OR),\n            default = true (AND)\n          </li>\n          <li>\n            doEmit: <span class=\"highlight\">boolean</span> - emit event (to refresh the table) or not, default = true\n          </li>\n        </ul>\n      <td>\n        Set table filter for one column, example: <br>\n        <code>this.source.addFilter({{ \"{ field: 'id', search: 'foobar' }\" }});</code>\n      </td>\n    </tr>\n    <tr>\n      <td>setPaging</td>\n      <td>\n        <ul>\n          <li>\n            page: <span class=\"highlight\">number</span> - page number\n          </li>\n          <li>\n            perPage: <span class=\"highlight\">number</span> - about per page\n          </li>\n          <li>\n            doEmit: <span class=\"highlight\">boolean</span> - emit event (to refresh the table) or not, default = true\n          </li>\n        </ul>\n      <td>\n        Set table pagination settings\n      </td>\n    </tr>\n    <tr>\n      <td>setPage</td>\n      <td>\n        <ul>\n          <li>\n            page: <span class=\"highlight\">number</span> - page number\n          </li>\n          <li>\n            doEmit: <span class=\"highlight\">boolean</span> - emit event (to refresh the table) or not, default = true\n          </li>\n        </ul>\n      <td>\n        Set table page\n      </td>\n    </tr>\n    <tr>\n      <td>reset</td>\n      <td>\n        <ul>\n          <li>silent: <span class=\"highlight\">boolean</span> - if true - you have to additionally call `refresh` to\n            reflect the changes\n          </li>\n        </ul>\n      <td>\n        Set data source to first page with empty filter and empty sort.\n      </td>\n    </tr>\n    <tr>\n      <td>refresh</td>\n      <td>\n        n/a\n      <td>\n        Refresh data in the data source. In most cases you won't need this method.\n      </td>\n    </tr>\n    <tr>\n      <td>count</td>\n      <td>\n        n/a\n      <td>\n        Return count of element in the data source.\n      </td>\n    </tr>\n    <tr>\n      <td>empty</td>\n      <td>\n        n/a\n      <td>\n        Empty the data source.\n      </td>\n    </tr>\n  </table>\n\n</section>\n"

/***/ }),

/***/ "../../../../../src/app/pages/documentation/documentation.component.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(true);
// imports


// module
exports.push([module.i, ".nested-obj {\n  color: #bdbdbd; }\n", "", {"version":3,"sources":["/Users/samuelnavarro/Downloads/ng2-smart-table-master/src/app/pages/documentation/documentation.component.scss"],"names":[],"mappings":"AAAA;EACE,eAAc,EACf","file":"documentation.component.scss","sourcesContent":[".nested-obj {\n  color: #bdbdbd;\n}\n"],"sourceRoot":""}]);

// exports


/*** EXPORTS FROM exports-loader ***/
module.exports = module.exports.toString();

/***/ }),

/***/ "../../../../../src/app/pages/documentation/documentation.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DocumentationComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

let DocumentationComponent = class DocumentationComponent {
};
DocumentationComponent = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["D" /* Component */])({
        selector: 'demo',
        styles: [__webpack_require__("../../../../../src/app/pages/documentation/documentation.component.scss")],
        template: __webpack_require__("../../../../../src/app/pages/documentation/documentation.component.html"),
    })
], DocumentationComponent);

//# sourceMappingURL=documentation.component.js.map

/***/ }),

/***/ "../../../../../src/app/pages/documentation/documentation.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("../../../core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__("../../../common/@angular/common.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_router__ = __webpack_require__("../../../router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_shared_module__ = __webpack_require__("../../../../../src/app/shared/shared.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__documentation_routes__ = __webpack_require__("../../../../../src/app/pages/documentation/documentation.routes.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__documentation_component__ = __webpack_require__("../../../../../src/app/pages/documentation/documentation.component.ts");
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentationModule", function() { return DocumentationModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






let DocumentationModule = class DocumentationModule {
};
DocumentationModule = __decorate([
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["b" /* NgModule */])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_1__angular_common__["a" /* CommonModule */],
            __WEBPACK_IMPORTED_MODULE_2__angular_router__["a" /* RouterModule */].forChild(__WEBPACK_IMPORTED_MODULE_4__documentation_routes__["a" /* routes */]),
            __WEBPACK_IMPORTED_MODULE_3__shared_shared_module__["a" /* SharedModule */],
        ],
        declarations: [
            __WEBPACK_IMPORTED_MODULE_5__documentation_component__["a" /* DocumentationComponent */],
        ],
    })
], DocumentationModule);

//# sourceMappingURL=documentation.module.js.map

/***/ }),

/***/ "../../../../../src/app/pages/documentation/documentation.routes.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__documentation_component__ = __webpack_require__("../../../../../src/app/pages/documentation/documentation.component.ts");

const routes = [
    {
        path: '',
        component: __WEBPACK_IMPORTED_MODULE_0__documentation_component__["a" /* DocumentationComponent */],
    },
];
/* harmony export (immutable) */ __webpack_exports__["a"] = routes;

//# sourceMappingURL=documentation.routes.js.map

/***/ })

});
//# sourceMappingURL=2.chunk.js.map